<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>oop on Dev Blog</title>
    <link>https://blog.aaronnotes.com/tags/oop/</link>
    <description>Recent content in oop on Dev Blog</description>
    <image>
      <title>Dev Blog</title>
      <url>https://cdn.jsdelivr.net/gh/lijqhs/cdn@1.6/img/icons/rocket-andy-hermawan-unsplash.jpg</url>
      <link>https://cdn.jsdelivr.net/gh/lijqhs/cdn@1.6/img/icons/rocket-andy-hermawan-unsplash.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 12 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.aaronnotes.com/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Overriding vs. Overloading</title>
      <link>https://blog.aaronnotes.com/posts/python/overriding-vs-overloading/</link>
      <pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.aaronnotes.com/posts/python/overriding-vs-overloading/</guid>
      <description>Both overriding and overloading are concepts in object-oriented programming that allow you to define methods with the same name but different behavior. However, they differ in their implementation and purpose.
Overriding Overriding is a mechanism by which a subclass can provide a different implementation of a method that is already defined in its superclass. When a method is overridden, the subclass&amp;rsquo;s implementation takes precedence over the superclass&amp;rsquo;s implementation, allowing you to customize the behavior of the method for the specific subclass.</description>
    </item>
    
    <item>
      <title>Duck Typing</title>
      <link>https://blog.aaronnotes.com/posts/python/duck-typing/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.aaronnotes.com/posts/python/duck-typing/</guid>
      <description>Duck typing is a concept in dynamic programming languages like Python, where the type of an object is determined not by its class name, but by its behavior or the methods and attributes it defines. The term &amp;ldquo;duck typing&amp;rdquo; comes from the phrase &amp;ldquo;if it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.&amp;rdquo;
In Python, duck typing means that an object&amp;rsquo;s suitability for a given task is determined by the presence of specific methods or attributes, rather than its type.</description>
    </item>
    
  </channel>
</rss>
